#!/usr/bin/env perl

# Author Nigel Horne: njh@bandsman.co.uk
# Copyright (C) 2016-2020, Nigel Horne

# Usage is subject to licence terms.
# The licence terms of this software are as follows:
# Personal single user: GPL2
# All other users (including Commercial, Charity, Educational, Government)
#	must apply in writing for a licence for use from Nigel Horne at the
#	above e-mail.

# The local minicpan repository has been updated, test all of the updated
#	modules;
#
#	-p: port (default 21212)
#	-d: debugging
#	-v: verbose

use warnings;
use strict;

my @modules;

# Install Pre-requisites
BEGIN {
	@modules = (
		'File::HomeDir', 'IPC::System::Simple', 'Proc::PID::File',
		'Sys::CpuLoad', 'Unix::Processors', 'BSD::Resource',
	);

	my @needfull;
	foreach my $module(@modules) {
		eval "use $module";
		if($@) {
			push @needfull, $module;
		}
	}
	if(scalar(@needfull)) {
		system('cpan -i ' . join(' ', @needfull));
	}

}

foreach my $module(@modules) {
	my $version;
	if($module =~ /(.+)\s(.+)$/) {
		$module = $1;
		$version = $2;
	}
	if($module =~ /.+\/(.+)/) {
		$module = $1;
	}
	eval "require $module";
	if($@) {
		die $@;
	}
	$module->import();
	# if($version && ($module::VERSION < $version)) {
		# die "$module: need $version got ", $module::VERSIOn;
	# }
}

use autodie qw(:all);
use Config;
use IO::Socket::INET;
use File::Path;
use File::Spec;
use File::Basename;
use Sys::Syslog;
use File::Temp;
use FindBin qw($Bin);
use Fcntl qw(:flock);
use Getopt::Std;
use POSIX ":sys_wait_h";

my $ppf_is_installed = 1;

my $mode;
my $child;

# Work out the best way to run commands
# Generally Proc::Killfam is better to use since all children will be killed,
#	I'm not persuaded that happens with Proc::Govern
if(($Config{'osname'} eq 'solaris') ||
   ($Config{'osname'} eq 'cygwin') ||
   ($Config{'osname'} eq 'gnukfreebsd')) {
	# Work around /usr/lib being built with Sun's C compiler, so
	# less is available because of link handshake errors
	eval {
		# Needs Proc::ProcessTable which doesn't support DragonflyBSD
		$mode = 'killfam';
	};
	if(!defined($mode)) {
		# Doesn't needs at least Perl 5.10.0
		$mode = 'govern';
	}
	if(!defined($mode)) {
		$mode = 'cmd';
	}
} elsif(defined($^V) && ($^V ge 'v5.10.1')) {
	# Doesn't needs at least Perl 5.10.1
	$mode = 'govern';
} elsif(($Config{'osname'} eq 'dragonfly') || ($Config{'osname'} eq 'haiku')) {
	$mode = 'cmd';
} else {
	# Needs Proc::ProcessTable which doesn't support DragonflyBSD
	$mode = 'killfam';
}

if($mode eq 'cmd') {
	@modules = ( 'IPC::Cmd' );
} elsif($mode eq 'govern') {
	@modules = ( 'Proc::Govern', 'Proc::Killfam' );
} elsif($mode eq 'killfam') {
	@modules = ( 'Proc::Killfam' );
}

my @needfull;
foreach my $module(@modules) {
	eval "use $module";
	if($@) {
		push @needfull, $module;
	}
}
if(scalar(@needfull)) {
	system('cpan -i ' . join(' ', @needfull));
}

foreach my $module(@modules) {
	my $version;
	if($module =~ /(.+)\s(.+)$/) {
		$module = $1;
		$version = $2;
	}
	if($module =~ /.+\/(.+)/) {
		$module = $1;
	}
	eval "require $module";
	if($@) {
		die $@;
	}
	$module->import();
	# if($version && ($module::VERSION < $version)) {
		# die "$module: need $version got ", $module::VERSIOn;
	# }
}

use lib File::Spec->catfile(File::HomeDir->my_home(), '.cpan', 'CPAN');
use MyConfig;

die 'Configure CPAN::Reporter' unless($CPAN::Config->{'test_report'});
die unless($CPAN::Config->{'urllist'});

my $lockfile = File::Spec->catfile($CPAN::Config->{'cpan_home'}, '.lock');
if(-r $lockfile && (open(my $fin, '<', $lockfile))) {
	my $pid = <$fin>;
	close $fin;
	if($pid) {
		chomp $pid;
		# Workaround for RT#86238
		if(($pid =~ /^\d+$/) && CORE::kill(0, $pid)) {
			die "CPAN shell running\n";
		}
	}
	unlink $lockfile;
}

my $lock;
my $tmpdir;
my $homedir = File::HomeDir->my_home();
if(!$ENV{'TMPDIR'}) {
	$tmpdir = File::Spec->catfile($homedir, 'tmp');
	if(!-d $tmpdir) {
		$tmpdir = undef;
	}
}
$tmpdir //= File::Spec->tmpdir();

my %opts;
getopts('dp:v', \%opts);

if($ppf_is_installed) {
	print 'Creating lock ',
		File::Spec->catfile($tmpdir, 'cpan-test'),
		"\n"
		if($opts{'v'});
	$lock = Proc::PID::File->new(dir => $tmpdir, name => 'cpan-test.pid', verify => 1);
} else {
	$lockfile = File::Spec->catfile($tmpdir, 'cpan-test.pid');
}

my $port = $opts{'p'} || 21212;

openlog('CPAN', 'cons,pid', 'user');

if(my $s = IO::Socket::INET->new(LocalPort => $port, Proto => 'udp')) {
	$s->close();
} else {
	syslog('warning', "Can't listen on port $port: $!");
	closelog();
	exit(0);
}

$opts{'v'} = 1 if($opts{'d'});

local $SIG{TERM} = $SIG{INT} = $SIG{HUP} = sub {
	print "quitting\n" if($opts{'v'});
	if($ppf_is_installed) {
		# FIXME:  causes unlink error in P:P:F if we're not currently running
		$lock->release();
	} else {
		unlink $lockfile;
	}
	exit 1;
};

# Eval added to handle RT113898
# eval {
	# my $number_of_cpus = Sys::Info->new()->device('CPU')->count();
#
	# if(defined($number_of_cpus) && ($number_of_cpus > 1)) {
		# $ENV{'HARNESS_OPTIONS'} = "j$number_of_cpus";
		# $ENV{'TEST_JOBS'} = $number_of_cpus;
	# }
# }
# };

my $number_of_cpus = Unix::Processors->new()->max_physical();
if(defined($number_of_cpus) && ($number_of_cpus > 1)) {
	$ENV{'HARNESS_OPTIONS'} = "j$number_of_cpus";
	$ENV{'TEST_JOBS'} = $number_of_cpus;
} else {
	delete $ENV{'HARNESS_OPTIONS'};
	delete $ENV{'TEST_JOBS'};
}

print "Mode: $mode\n" if($opts{'v'});

if((!defined($ENV{'PERLBREW_ROOT'})) && (my $home = $ENV{'HOME'})) {
	# This is needed if smokerdaemon is started from a crontab, so that the first
	#	startup call to smoker finds perlbrew
	# TODO: read from config files
	$ENV{'PERLBREW_ROOT'} = File::Spec->catfile($home, 'perl5', 'perlbrew');
	$ENV{'PERLBREW_PATH'} = File::Spec->catfile($home, 'perl5', 'perlbrew', 'bin');
	$ENV{'PERLBREW_HOME'} = File::Spec->catfile($home, '.perlbrew');
	$ENV{'PATH'} .= File::Spec->catfile($home, 'perl5', 'perlbrew', 'bin');
}

$ENV{'CPAN_SQLITE_NO_LOG_FILES'} = 1;
delete $ENV{'CC'};
delete $ENV{'CFLAGS'};
delete $ENV{'LDFLAGS'};
$ENV{'AUTOMATED_TESTING'} = 1;

my $clean_after_test = 0;
my $config;
if(eval { require Config::Auto; } ) {
	Config::Auto->import();
	eval { $config = Config::Auto::parse() };
}

if($config && defined($config->{'clean_after_test'})) {
	$clean_after_test = $config->{'clean_after_test'};
} elsif(-r '/proc/1/cgroup') {
	# Running in a Docker container, so nothing should be living with us
	$clean_after_test = 1;
}

# On first startup run a few tests that we may have missed
if($opts{'v'}) {
	require Data::Dumper;
	Data::Dumper->import();
	my $rc = timed_system(300, 'perlbrew', 'exec', "$Bin/smoker", '-v');
} else {
	my $rc = timed_system(300, 'perlbrew', 'exec', "$Bin/smoker");
}

clean($clean_after_test);

# Limit resources
# Note that counter-intuitively these are not inherited through an exec()
# If you're in a container you should also limit it there, e.g.:
#	'docker run -m 1g'
# This doesn't work on Cygwin or Windows
if(($^O ne 'cygwin') && ($^O ne 'MSWin32')) {
	setrlimit(RLIMIT_DATA, 512 * 1024 * 1024, 256 * 1024 * 1024) or
		warn('Can\'t limit the data size - watch for memory usage');

	if($^O ne 'solaris') {
		# setrlimit(RLIMIT_RSS, 512 * 1024 * 1024, 64 * 1024 * 1024) or
			# warn('Can\'t limit the RSS size - watch for memory usage');
		setrlimit(RLIMIT_RSS, 512 * 1024 * 1024, 64 * 1024 * 1024);

		# Big enough for the Metadata file
		setrlimit(RLIMIT_FSIZE, 40 * 1024 * 1024, 10 * 1024 * 1024);
		# setrlimit(RLIMIT_FSIZE, 40 * 1024 * 1024, 10 * 1024 * 1024) or
			# warn('Can\'t limit the file size - watch for large temporary files');
	}
}

my $logfile = File::Spec->catfile(File::Spec->tmpdir(), basename("$0.out"));
my $errfile = File::Spec->catfile(File::Spec->tmpdir(), basename("$0.err"));

while(1) {
	# Not needed, but somehow it seems cleaner to close and reopen
	my $s = IO::Socket::INET->new(LocalPort => $port, Proto => 'udp')
		# or die "Can't listen on port $port";
		or exit(0);

	my @dists;

	syslog('info', "Waiting to be told on port $port what to smoke");
	print "Waiting to be told on port $port what to smoke\n" if($opts{'v'});

	# push @dists, 'M/MI/MILSO/Pod-Weaver-Section-CommentString-0.03';
	DIST: while(1) {
		my $dist;

		$s->recv($dist, 256);

		if($dist eq "\n") {
			print "End of list\n" if($opts{'v'});
			last DIST;
		}

		print "queuing $dist" if($opts{'v'});

		chomp $dist;

		push @dists, $dist;
	}

	$s->close();

	my $list;
	my $lastdist;

	foreach my $dist(reverse sort @dists) {
		# Don't test earlier versions
		if($dist =~ /^([A-Z0-9\-\/]+)[v\-\.]\d+/i) {
			my $module = $1;
			if($lastdist) {
				# Ignore earlier version
				# print "-$dist\n";
				next if($module eq $lastdist);
			}
			$lastdist = $module;
		} else {
			print "$dist: didn't match regex\n" if($opts{'v'});
		}
		if($list) {
			$list .= ',';
		}
		$list .= "\\\"$dist.tar.gz\\\"";
	}

	if(!defined($list)) {
		print "Nothing to smoke\n" if($opts{'v'});
		sleep(1);	# avoid looping
		next;
	}

	syslog('info', "Smoking $list");
	print 'Smoking ', join("\n", @dists), "\n" if($opts{'v'});

	while(1) {
		my @lav = Sys::CpuLoad::load();
		if(defined($lav[0]) && ($lav[0] > 3)) {
			sleep(10);
			next;
		}

		if($ppf_is_installed) {
			while($lock->alive()) {
				print "Already running\n" if($opts{'v'});
				sleep(10);
			}
			$lock->touch();
		} else {
			if((-r $lockfile) && open($lock, '<', $lockfile)) {
				my $pid = <$lock>;
				close $lock;
				if($pid) {
					chomp $pid;
					if(kill(0, $pid)) {
						print "Already running\n" if($opts{'v'});
						sleep(10);
						next;
					}
				}
			}
			open($lock, '>', $lockfile) or die "$lockfile: $!";
			flock($lock, LOCK_EX|LOCK_NB) or die "$lockfile: $!";
			print $lock $$;
			$lock->flush();
		}
		last;
	}

	my $tmp = File::Temp->new(UNLINK => 0);
	if($opts{'v'}) {
		# print $tmp "source \$PERLBREW_ROOT/etc/bashrc\nexec perlbrew exec perl -MCPAN -e 'CPAN::Shell->test($list)' < /dev/null\n";
		# print "source \$PERLBREW_ROOT/etc/bashrc\nexec perlbrew exec perl -MCPAN -e 'CPAN::Shell->test($list)' < /dev/null\n";
		print $tmp "source \$PERLBREW_ROOT/etc/bashrc\nexec perlbrew exec $Bin/testwrapper $list < /dev/null\n";
		print "source \$PERLBREW_ROOT/etc/bashrc\nexec perlbrew exec $Bin/testwrapper $list < /dev/null\n";
	} else {
		# print $tmp "source \$PERLBREW_ROOT/etc/bashrc\nexec perlbrew exec perl -MCPAN -e 'CPAN::Shell->test($list)' > $logfile 2> $errfile < /dev/null\n";
		print $tmp "source \$PERLBREW_ROOT/etc/bashrc\nexec perlbrew exec $Bin/testwrapper $list > $logfile 2> $errfile < /dev/null\n";
	}
	my $filename = $tmp->filename();
	close $tmp;

	chmod 0700, $filename;
	# Since this is the top level of the call chain
	#	smokerdaemon or /usr/bin/timeout->smoker->testwrapper
	#	this should time out last
	my $rc = timed_system(3300, $filename);

	unless($opts{'d'}) {
		if(-r $filename) {
			unlink($filename);
		} else {
			syslog('warning', "$filename has disappeared");
			warn "$filename has disappeared";
		}
	}

	# kill '-CONT', getpgrp();	# Fails with no such signal
	kill 'CONT', $child if($child);

	nohang();

	clean($clean_after_test);

	if($ppf_is_installed) {
		$lock->release();
	} else {
		close $lock if(defined($lock));
		unlink $lockfile if(-r $lockfile);
	}
}

$lock->release();
closelog();

# http://www.perlmonks.org/?node_id=324176
sub timed_system {
	my $timeout = shift;
	my @command;

	my $shell = $ENV{'SHELL'} || $CPAN::Config->{'shell'} || 'bash';

	my $command = join(' ', @_);

	if($opts{'v'}) {
		@command = ($shell, '-xc', $command);
	} else {
		@command = ($shell, '-c', $command);
	}

	if($mode eq 'govern') {
		my $load_low_limit = $number_of_cpus - 1;
		if($load_low_limit <= 0) {
			$load_low_limit = 1;
		}
		my %args = (
			name => 'testwrapper',
			command => \@command,
			timeout => $timeout,
			killfam => 1,
			load_watch => 1,
			load_high_limit => $number_of_cpus + 1,
			load_low_limit => $load_low_limit,
			on_multiple_instance => 'exit',
		);

		print Data::Dumper->new([\%args])->Dump() if($opts{'v'});

		if($opts{'v'} || $opts{'i'}) {
			$args{show_stdout} = 1;
			$args{show_stderr} = 1;
			$args{log_stderr}->{'dir'} = File::Spec->tmpdir();
			# $args{log_stderr}->{'size'} = '1M';
			$args{log_stderr}->{'size'} = 1024 * 1024;
			$args{log_stderr}->{'histories'} = '100';
		} else {
			$args{show_stdout} = 0;
			$args{show_stderr} = 0;
		}

		return Proc::Govern::govern_process(%args);
	}

	if($mode eq 'killfam') {
		my $rc = -1;
		eval {
			$child = fork;

			die "Fork failed: $!" unless defined $child;

			unless ($child) {
				if($opts{'v'}) {
					print "$shell -xc $command\n";
					exec $shell, '-xc', $command;
				} else {
					# print "$shell -c $command\n";
					exec $shell, '-c', $command;
				}
				die "Exec failed: $!";
			}

			local $SIG{ALRM} = sub {
				if($opts{'v'}) {
					print "Killing process family $child\n";
				}
				my @pidlist = ($child);
				Proc::Killfam::killfam(18, @pidlist);
				sleep 2;
				Proc::Killfam::killfam(14, @pidlist);
				sleep 2;
				Proc::Killfam::killfam(15, @pidlist);
				sleep 2;
				Proc::Killfam::killfam(9, @pidlist);
				sleep 2;
				kill 18, $child;
				sleep 2;
				kill 14, $child;
				sleep 2;
				kill 15, $child;
				sleep 2;
				kill 9, $child;
				sleep 2;

				if(kill(0, $child)) {
					syslog('warning', "$child won't die");
					die "Timeout! $child Won't die";
				}
				# die "Timeout!"

				nohang();
			}; # Just SIGTERM.

			alarm $timeout;

			$rc = (waitpid($child, 0) == $child) ? $? : -1;

			alarm 0;

			if(kill(0, $child)) {
				my @pidlist = ($child);
				Proc::Killfam::killfam(18, @pidlist);
				sleep 2;
				Proc::Killfam::killfam(14, @pidlist);
				sleep 2;
				Proc::Killfam::killfam(15, @pidlist);
				sleep 2;
				Proc::Killfam::killfam(9, @pidlist);
				sleep 2;
				kill 9, $child;
			}
			# TODO
			# Elsif $rc != -1 - insert code like System module
		};
		return -1 if $@ && $@ !~ /^Timeout!/;

		return $rc;
	}
	return IPC::Cmd::run(command => \@command, timeout => $timeout, verbose => $opts{'v'});
}

sub nohang {
	my $count = 0;

	while(waitpid(-1, WNOHANG) >= 0) {
		if($count++ >= 60) {
			syslog('warning', 'Stopped waiting for child after 60 seconds');
			last;
		}
		sleep(1);
	}
}

sub clean {
	my $clean_after_test = shift;

	if($clean_after_test && (my $build_dir = $CPAN::Config->{'build_dir'})) {
		print "Emptying $build_dir\n" if($opts{'v'});
		File::Path::rmtree($build_dir);
	}
}
