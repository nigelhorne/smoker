#!/usr/bin/env perl

# Author Nigel Horne: njh@bandsman.co.uk
# Copyright (C) 2015-2017, Nigel Horne

# Usage is subject to licence terms.
# The licence terms of this software are as follows:
# Personal single user, single computer use: GPL2
# All other users (including Commercial, Charity, Educational, Government)
#	must apply in writing for a licence for use from Nigel Horne at the
#	above e-mail.

# I Love App::SmokeBox::Mini, unfortunately too many of its dependancies don't
# build on many platforms, so this is a small plaything that does for me

# 19 * * * * [ -r .perlbrew/init ] && /bin/bash bin/perlbrew-cron bin/smoker

use warnings;
use strict;
# use autodie qw(:all);

use Getopt::Std;
use LWP::Simple;
use Proc::Killfam;
use File::HomeDir;
use File::Spec;
use Fcntl qw(:flock);
use BSD::Resource;
use Unix::Processors;
use Sys::LoadAvg;
use POSIX ":sys_wait_h";
use lib File::Spec->catfile(File::HomeDir->my_home(), '/.cpan/CPAN');

use MyConfig;

die 'Install and configure CPAN::Reporter' unless($CPAN::Config->{'test_report'});
die unless($CPAN::Config->{'urllist'});

my %opts;
getopts('iv', \%opts);

my $recent;
foreach my $url(@{$CPAN::Config->{'urllist'}}) {
	$recent = get("$url/RECENT");
	if($recent) {
		print "Fetching from $url\n" if($opts{'v'});
		last;
	}
}

die if(!$recent);

$ENV{'CPAN_SQLITE_NO_LOG_FILES'} = 1;
if(!$opts{'i'}) {
	$ENV{'AUTOMATED_TESTING'} = 1;
}

my $lockfile = File::Spec->catfile($CPAN::Config->{'cpan_home'}, '.lock');
if((-r $lockfile) && (open(my $lock, '<', $lockfile))) {
	my $pid = <$lock>;
	close $lock;
	chomp $pid;
	if(kill(0, $pid)) {
		print "CPAN shell running\n";
		exit;
	}
	unlink $lockfile;
}
$lockfile = File::Spec->catfile(File::Spec->tmpdir(), 'cpan-test.lck');

local $SIG{TERM} = $SIG{INT} = $SIG{HUP} = sub {
	unlink $lockfile;
	exit 1;
};

# setrlimit(RLIMIT_DATA, 32 * 1024 * 1024, 64 * 1024 * 1024) or
	# warn ('Can\'t limit the data size - watch for memory usage');

# setrlimit(RLIMIT_RSS, 32 * 1024 * 1024, 64 * 1024 * 1024) or
	# warn ('Can\'t limit the data size - watch for memory usage');

setrlimit(RLIMIT_CPU, 300, 1200) or
	warn ('Can\'t limit the CPU time - watch for long running programs');

# Eval added to handle RT113898
# eval {
	# my $number_of_cpus = Sys::Info->new()->device('CPU')->count();
# 
	# if(defined($number_of_cpus) && ($number_of_cpus > 1)) {
		# $ENV{'HARNESS_OPTIONS'} = "j$number_of_cpus";
		# $ENV{'TEST_JOBS'} = $number_of_cpus;
	# }
# }
# };

my $number_of_cpus = Unix::Processors->new()->max_physical();
if(defined($number_of_cpus) && ($number_of_cpus > 1)) {
	$ENV{'HARNESS_OPTIONS'} = "j$number_of_cpus";
	$ENV{'TEST_JOBS'} = $number_of_cpus;
}

my @dists;

foreach my $dist(split(/\n/, $recent)) {
	if($dist =~ /^authors\/id\/(.+)/) {
		$dist = $1;
	} else {
		next;
	}
	next if($dist =~ /\/CHECKSUMS$/);
	next if($dist =~ /\.meta$/);
	next if($dist =~ /\.readme$/);
	# $dist =~ s/\//::/g;

	push @dists, $dist;
}

my $lock;
my $count = 0;

while(1) {
	my @load = Sys::LoadAvg::loadavg();
	if($load[LOADAVG_1MIN] >= 3) {
		print STDERR 'Busy - Load Average ', $load[LOADAVG_1MIN], "\n";
		sleep 120;
		next;
	}

	if((-r $lockfile) && (open($lock, '<', $lockfile))) {
		my $pid = <$lock>;
		close $lock;
		chomp $pid;
		if(kill(0, $pid)) {
			if(++$count >= 6) {
				die "Already running";
			}
			print "Already running\n" if($opts{'v'});
			sleep(10);
			next;
		}
		close $lock;
	}
	open(my $lock, '>', $lockfile) or die "$lockfile: $!";
	flock($lock, LOCK_EX|LOCK_NB) or die "$lockfile: $!";
	print $lock $$;
	flush $lock;
	last;
}

if(scalar(@dists)) {
	my $list;
	foreach my $dist(@dists) {
		if($list) {
			$list .= ',';
		}
		$list .= "\"$dist\"";
	}
	if($opts{'i'}) {
		system("perl -MCPAN -e 'CPAN::Shell->test($list)'"),
	} elsif($opts{'v'}) {
		timed_system(3300, "perl -MCPAN -e 'CPAN::Shell->test($list)' < /dev/null");
	} else {
		print join("\n", @dists), "\n";
		timed_system(3300, "perl -MCPAN -e 'CPAN::Shell->test($list)' > /dev/null 2>&1 < /dev/null");
	}
}
close $lock if(defined($lock));
unlink $lockfile;

1 while(waitpid(-1, WNOHANG) >= 0);

# http://www.perlmonks.org/?node_id=324176
sub timed_system {
	my $time = shift;

	my $pid;
 
	local $SIG{ALRM} = sub {
		if($opts{'v'}) {
			print "Killing process family $pid\n";
		}
		killfam 14, $pid or die "killfam: $!";
		sleep 2;
		kill 14, $pid;
		sleep 2;
		killfam 9, $pid;
		kill 9, $pid;

		die "$pid Won't die" if(kill(0, $pid));
		# die "Timeout!"

		1 while(waitpid(-1, WNOHANG) >= 0);
	}; # Just SIGTERM.
 
	my $rc = -1;
	eval {
		$pid = fork;
 
		die "Fork failed: $!" unless defined $pid;
 
		unless ($pid) {
			print @_, "\n" if($opts{'v'});
			exec @_;
			die "Exec failed: $!";
		}
 
		alarm $time;
 
		$rc = (waitpid($pid, 0) == $pid) ? $? : -1;

		alarm 0;
	};
	return -1 if $@ && $@ !~ /^Timeout!/;

	return $rc;
}
