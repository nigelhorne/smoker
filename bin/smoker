#!/usr/bin/env perl

# Author Nigel Horne: njh@bandsman.co.uk
# Copyright (C) 2015-2022, Nigel Horne

# Usage is subject to licence terms.
# The licence terms of this software are as follows:
# Personal single user, single computer use: GPL2
# All other users (including Commercial, Charity, Educational, Government)
#	must apply in writing for a licence for use from Nigel Horne at the
#	above e-mail.

# I Love App::SmokeBox::Mini, unfortunately too many of its dependencies don't
# build on many platforms, so this is a small plaything that does for me

# Takes an optional argument of the number of minutes since the last run

# -v: verbose (logs more of what's going on)
# -d: debug (logs go to the console instead of /tmp/smoker.out and /tmp/smoker.err
# -f: force running the smoker

# TODO:  $HOME/.cpan_smoker.rc doesn't get pruned.  Should remove entries older
#	than a week, for example

# 19 * * * * [ -r .perlbrew/init ] && /bin/bash /usr/bin/timeout -s SIGALARM -k 300 3300 bin/perlbrew-cron bin/smoker 60
# or
# 19 * * * * docker run perl-5.32.0

# RLIMIT_DATA => 2,
# RLIMIT_RSS => 5,
# RLIMIT_CPU => 0,
# RLIMIT_FSIZE => 1,

use utf8;
use strict;
use warnings;

sub declared ($);

my @needfull;

BEGIN {
	# if($] >= 5.016) {
		# use open qw(:std :utf8);
		# if($] >= 5.032) {
			# no feature qw(indirect);
		# }
		# if($] >= 5.020) {
			# use feature qw(signatures);
			# no warnings qw(experimental::signatures);
		# }
		# use autodie qw(:all);	# Don't enable, since the kill failing isn't caught
	# }
	use if $] >= 5.016, 'open', qw(:std :utf8);

	# Install Pre-requisites
	my @modules = (
		'File::HomeDir', 'File::Path', 'File::Temp',
		# 'File::Write::Rotate',
		'Getopt::Std', 'HTTP::Cache::Transparent',
		'CPAN::Reporter',
		'LWP::Simple::WithCache', 'JSON::MaybeXS', 'Proc::PID::File',
		'Test::Reporter::Transport',
		'Unix::Processors', 'Sys::Syslog',
	);
	if(($^O ne 'MSWin32') && ($^O ne 'solaris')) {
		push @modules, 'BSD::Resource',
	}
	if($^O ne 'cygwin') {
		push @modules, 'Sys::CpuLoad',
	}
	foreach my $module(@modules) {
		eval "use $module";
		if($@) {
			# Install module dependancies
			if($module =~ /(.+)\s/) {
				# Specific version not satisfied
				push @needfull, $1;
			} else {
				push @needfull, $module;
			}
		}
	}
	if(scalar(@needfull)) {
		system('cpan -i ' . join(' ', @needfull));
	}
}

foreach my $module(@needfull) {
	my $version;
	if($module =~ /(.+)\s(.+)$/) {
		$module = $1;
		$version = $2;
	}
	if($module =~ /.+\/(.+)/) {
		$module = $1;
	}
	eval "require $module";
	if($@) {
		die $@;
	}
	$module->import();
	# if($version && ($module::VERSION < $version)) {
		# die "$module: need $version got ", $module::VERSION;
	# }
}

my $child;

END {
	if($child) {
		kill 'CONT', -$child;
		Sys::Syslog::syslog('warning', "smoker: killing dangling child $child");
		Sys::Syslog::closelog();
		sleep 2;
		kill 'TERM', -$child;
		sleep 2;
		kill 'KILL', -$child;
	}
}

use File::Spec;
use File::Basename;
use FindBin qw($Bin);
use Fcntl qw(:flock);
# use Sys::LoadAvg;	# Core dumps because the array isn't big enough. Bug report has been ignored
use POSIX ":sys_wait_h";
use IO::Handle;
use Config;

my $ppf_is_installed = 1;

use lib File::Spec->catfile(File::HomeDir->my_home(), '.cpan', 'CPAN');
use MyConfig;

die 'Install and configure CPAN::Reporter then set up test_report in $HOME/.cpan/CPAN/MyConfig.pm'
	unless($CPAN::Config->{'test_report'});
die unless($CPAN::Config->{'urllist'});

my $mode;

# Work out the best way to run commands
# Generally Proc::Killfam is better to use since all children will be killed,
#	I'm not persuaded that happens with Proc::Govern
if(($Config{'osname'} eq 'solaris') ||
   # ($Config{'osname'} eq 'cygwin') ||
   ($Config{'osname'} eq 'MSWin32') ||
   ($Config{'osname'} eq 'dragonfly') ||
   ($Config{'osname'} eq 'haiku') ||
   ($Config{'osname'} eq 'gnukfreebsd')) {
	$mode = 'cmd';
} elsif(($Config{'osname'} ne 'cygwin') && defined($^V) && ($^V ge 'v5.10.1')) {
	# Doesn't needs at least Perl 5.10.1
	$mode = 'govern';
} else {
	$mode = 'killfam';
}

@needfull = ();
my @modules;

if($mode eq 'cmd') {
	@modules = ( 'IPC::Cmd' );
} elsif($mode eq 'govern') {
	@modules = ( 'Proc::Govern', 'Proc::Killfam', 'Unix::Uptime' );
} elsif($mode eq 'killfam') {
	@modules = ( 'Proc::Killfam' );
}

# Only load HTTPS support if it's needed
my @urllist = @{$CPAN::Config->{'urllist'}};
foreach my $url(@urllist) {
	if($url =~ /^https:\/\//) {
		push @needfull, 'LWP::Protocol::https';
	}
}

if($ARGV[0]) {
	push @needfull, 'CPAN::Recent::Uploads';
}

foreach my $module(@modules) {
	eval "require $module";
	if($@) {
		push @needfull, $module;
	} else {
		$module->import();
	}
}
if(scalar(@needfull)) {
	system('cpan -i ' . join(' ', @needfull));
}

foreach my $module(@modules) {
	my $version;
	if($module =~ /(.+)\s(.+)$/) {
		$module = $1;
		$version = $2;
	}
	if($module =~ /.+\/(.+)/) {
		$module = $1;
	}
	eval "require $module";
	if($@) {
		die $@;
	}
	$module->import();
	# if($version && ($module::VERSION < $version)) {
		# die "$module: need $version got ", $module::VERSIOn;
	# }
}

my %opts;
getopts('dfiv', \%opts);

if(!$opts{'f'}) {
	# Only run inside a docker container
	exit unless(-r '/proc/1/cgroup');
}

if($opts{'d'}) {
	$opts{'v'} = 1;
}

print "Mode: $mode\n" if($opts{'v'});

$ENV{'CPAN_SQLITE_NO_LOG_FILES'} = 1;
delete $ENV{'CC'};
delete $ENV{'CFLAGS'};
delete $ENV{'LDFLAGS'};
if(!$opts{'i'}) {
	$ENV{'AUTOMATED_TESTING'} = 1;
	$ENV{'PERL_MM_USE_DEFAULT'} = 1;
}

openlog('CPAN', 'cons,pid', 'user');

my $cpan_lockfile = File::Spec->catfile($CPAN::Config->{'cpan_home'}, '.lock');
print "Lockfile: $cpan_lockfile\n" if($opts{'v'});
if((-r $cpan_lockfile) && open(my $fin, '<', $cpan_lockfile)) {
	my $pid = <$fin>;
	close $fin;
	chomp $pid;
	if(kill(0, $pid)) {
		print STDERR "CPAN shell running\n";
		exit(1);
	}
	unlink $cpan_lockfile;
}

my $lock;
my $tmpdir;
my $homedir = File::HomeDir->my_home();
if(!$ENV{'TMPDIR'}) {
	$tmpdir = File::Spec->catfile($homedir, 'tmp');
	if(!-d $tmpdir) {
		$tmpdir = undef;
	}
}
$tmpdir ||= File::Spec->tmpdir();

my $lockfile;

if($ppf_is_installed) {
	print 'Creating lock ',
		File::Spec->catfile($tmpdir, 'cpan-test.pid'),
		"\n"
		if($opts{'v'});
	$lock = Proc::PID::File->new(dir => $tmpdir, name => 'cpan-test', verify => 1);
} else {
	$lockfile = File::Spec->catfile($tmpdir, 'cpan-test.pid');
}

my $config;
if(eval { require Config::Auto; } ) {
	Config::Auto->import();
	eval { $config = Config::Auto::parse() };
}

my $clean_after_test = 0;
if($config && defined($config->{'clean_after_test'})) {
	$clean_after_test = $config->{'clean_after_test'};
} elsif(-r '/proc/1/cgroup') {
	# Running in a Docker container, so nothing should be living with us
	$clean_after_test = 1;
}

local $SIG{ALRM} = $SIG{TERM} = $SIG{INT} = $SIG{HUP} = sub {
	print "Quitting...\n" if($opts{'v'});
	# kill '-CONT', getpgrp();	# Fails with no such signal
	kill 'CONT', $child if($child);
	clean($clean_after_test);
	if($ppf_is_installed) {
		# $lock->release();
	} elsif(-e $lockfile) {
		unlink($lockfile);
	}
	exit(1);
};

# Limit resources
# Note that counter-intuitively these are not inherited through an exec()
# If you're in a container you should also limit it there, e.g.:
#	'docker run -m 1g'
# This doesn't work on Cygwin or Windows
if(($^O ne 'cygwin') && ($^O ne 'MSWin32')) {
	if($Config{'osname'} ne 'solaris') {
		if($^O ne 'darwin') {
			setrlimit(2, 512 * 1024 * 1024, 512 * 1024 * 1024) or
				warn('Can\'t limit the data size - watch for memory usage');
		}

		# setrlimit(RLIMIT_RSS, 512 * 1024 * 1024, 64 * 1024 * 1024) or
			# warn('Can\'t limit the RSS size - watch for memory usage');
		setrlimit(5, 512 * 1024 * 1024, 64 * 1024 * 1024);

		# Big enough for the Metadata file
		setrlimit(1, 40 * 1024 * 1024, 10 * 1024 * 1024);
		# setrlimit(RLIMIT_FSIZE, 40 * 1024 * 1024, 10 * 1024 * 1024) or
			# warn('Can\'t limit the file size - watch for large temporary files');
		# 5 minutes is more than enough CPU time
		setrlimit(0, 300, 600) or
			warn('Can\'t limit the CPU time - watch for long running programs');
	}
}

# Eval added to handle RT113898
# eval {
	# my $number_of_cpus = Sys::Info->new()->device('CPU')->count();
#
	# if(defined($number_of_cpus) && ($number_of_cpus > 1)) {
		# $ENV{'HARNESS_OPTIONS'} = "j$number_of_cpus";
		# $ENV{'TEST_JOBS'} = $number_of_cpus;
	# }
# }
# };

my $number_of_cpus = Unix::Processors->new()->max_physical();
if(defined($number_of_cpus) && ($number_of_cpus > 1)) {
	$ENV{'HARNESS_OPTIONS'} = "j$number_of_cpus";
	$ENV{'TEST_JOBS'} = $number_of_cpus;
}

my @dists;
my $prev_tests;

my $json_file = File::Spec->catfile($homedir, '.cpan_smoker.rc');
print "Checking $json_file\n" if($opts{'v'});

my $cachedir;
if($cachedir = $ENV{'CACHEDIR'}) {
	$cachedir = File::Spec->catfile($cachedir, 'http-cache-transparent');
} else {
	# $cachedir = File::Spec->catfile(File::Spec->tmpdir(), 'cache', 'http-cache-transparent');
	$cachedir = File::Spec->catfile(File::HomeDir->my_home(), '.cache', 'http-cache-transparent');
}
if(!-d $cachedir) {
	mkdir $cachedir || die "$cachedir: $!";
}
HTTP::Cache::Transparent::init({
	BasePath => $cachedir,
	Verbose => $opts{'v'} ? 1 : 0,
	NoUpdate => 30 * 60,
});

if((-r $json_file) && open(my $fin, '<', $json_file)) {
	my $json = JSON::MaybeXS->new()->allow_nonref();
	local $/ = undef;
	eval {
		$prev_tests = $json->decode(<$fin>);
	};
	close $fin;
}

if($ARGV[0]) {
	@dists = CPAN::Recent::Uploads->recent($ARGV[0] * 60, @{$CPAN::Config->{'urllist'}}[0]);
} else {
	my $recent;
	foreach my $url(@{$CPAN::Config->{'urllist'}}) {
		print "Fetching $url/RECENT\n" if($opts{'v'});
		if($recent = LWP::Simple::WithCache::get("$url/RECENT")) {
			last;
		}
	}

	die "Can't retrieve the RECENT file" if(!$recent);

	my $lastdist;
	my $now = time;

	foreach my $dist(reverse sort split(/\n/, $recent)) {
		if($dist =~ /^authors\/id\/(.+)/) {
			$dist = $1;
		} else {
			next;
		}
		next if($dist =~ /\/CHECKSUMS$/i);
		next if($dist =~ /\.meta$/i);
		next if($dist =~ /\.readme$/i);
		next if($dist =~ /\.html$/i);

		print "Considering $dist\n" if($opts{'v'});

		# Don't test earlier versions
		if($dist =~ /^([A-Z0-9\-\/]+)[v\-\.]\d+/i) {
			my $module = $1;
			if($lastdist) {
				# Ignore earlier version
				# print "-$dist\n";
				next if($module eq $lastdist);
			}
			$lastdist = $module;
		}
		# $dist =~ s/\//::/g;

		# Don't test versions already tested
		if(my $then = $prev_tests->{$^X}->{$dist}) {
			print "now: $now; then: $then\n" if($opts{'v'});
			if(($now - $then) > 7 * 24 * 3600) {
				# Prune the tree of old results
				print "Prune $dist from history\n" if($opts{'v'});
				delete $prev_tests->{$^X}->{$dist};
			}
		} else {
			# It's a new version
			unshift @dists, $dist;
			print "Will test $dist\n" if($opts{'v'});
		}
	}
}

if(scalar(@dists) == 0) {	# Won't write the pruned tree
	print "Nothing to smoke\n" if($opts{'v'});
	clean($clean_after_test);
	if($ppf_is_installed) {
		# $lock->release();
	} elsif(-e $lockfile) {
		unlink($lockfile);
	}
	exit(0);
}

my $count = 0;
my $basename = basename(0);
my $logfile = File::Spec->catfile($tmpdir, $basename);

while(1) {
	# my @load = Sys::LoadAvg::loadavg();
	# if($load[LOADAVG_1MIN] >= 3) {
		# print STDERR 'Busy - Load Average ', $load[LOADAVG_1MIN], "\n";

	if((!$opts{'f'}) && ($Config{'osname'} ne 'cygwin')) {
		# I don't know what Cygwin's load average is calculated from
		# so I don't trust it
		my @lav = Sys::CpuLoad::load();
		if(defined($lav[0])) {
			if($lav[0] > 5) {
				print STDERR 'Very Busy - Load Average ', $lav[0], "\n";
				exit(0);
			}
			if($lav[0] > 3) {
				print STDERR 'Busy - Load Average ', $lav[0], "\n";
				sleep(120);
				next;
			}
		}
	}

	if((-r $cpan_lockfile) && open(my $fin, '<', $cpan_lockfile)) {
		# CPAN shell has been started since we started
		my $pid = <$fin>;
		close $fin;
		chomp $pid;
		if(kill(0, $pid)) {
			print STDERR "CPAN shell running\n";
			exit(1);
		}
		unlink $cpan_lockfile;
	}

	if($ppf_is_installed) {
		print "Checking lock\n" if($opts{'v'});
		while($lock->alive()) {
			if(++$count >= 6) {
				die "Already running" if($opts{'v'});
				exit(0);
			}
			print "Already running\n" if($opts{'v'});
			sleep(10);
		}
		print "Locking\n" if($opts{'v'});
		$lock->touch();
	} elsif((-r $lockfile) && ($lock || open($lock, '<', $lockfile))) {
		my $pid = <$lock>;
		close $lock;
		if($pid) {
			chomp $pid;
			if(kill(0, $pid)) {
				if(++$count >= 6) {
					die "Already running" if($opts{'v'});
					exit(0);
				}
				print "Already running\n" if($opts{'v'});
				$lock = undef;
				sleep(10);
				next;
			}
		}
		open($lock, '>', $lockfile) or die "$lockfile: $!";
		flock($lock, LOCK_EX|LOCK_NB) or die "$lockfile: $!";
		print $lock $$;
		$lock->flush();
	}
	last;
}

# if(my $build_dir = $CPAN::Config->{'build_dir'}) {
	# File::Path::rmtree($build_dir);
# }

my $list;
foreach my $dist(@dists) {
	next if($dist =~ /\/perl-?[56][\.\/]/i);
	if($list) {
		$list .= ',';
	}
	$list .= "\"\\\"$dist\\\"\"";
	print "$dist\n";
}
# print join("\n", @dists), "\n";
if($opts{'i'}) {
	# system("perl -MCPAN -e 'CPAN::Shell->test($list)'");
	if($opts{'v'}) {
		my $shell = $ENV{'SHELL'} || $CPAN::Config->{'shell'} || 'bash';
		system("$shell -x $Bin/testwrapper $list");
	} else {
		system("$Bin/testwrapper $list");
	}
} else {
	if($opts{'v'}) {
		require Data::Dumper;
		Data::Dumper->import();
	}

	# Since this is the second level of the call chain
	#	smokerdaemon or /usr/bin/timeout->smoker->testwrapper
	#	this should timeout second
	if($mode eq 'govern') {
		close(STDIN);
		open(STDIN, '<', '/dev/null');
		unless($opts{'d'}) {
			close(STDOUT);
			open(STDOUT, '>>', "$logfile.out");
			close(STDERR);
			open(STDERR, '>>', "$logfile.err");
		}
		print "$Bin/testwrapper $list" if($opts{'v'});
		timed_system(3000, "$Bin/testwrapper $list");
	} elsif($opts{'d'}) {
		timed_system(3000, "$Bin/testwrapper $list < /dev/null");
	} else {
		# timed_system(3000, "perl -MCPAN -e 'CPAN::Shell->test($list)' >> $logfile.out 2>> $logfile.err < /dev/null");
		timed_system(3000, "$Bin/testwrapper $list >> $logfile.out 2>> $logfile.err < /dev/null");
	}
}

# kill '-CONT', getpgrp();	# Fails with no such signal
kill 'CONT', $child if($child);

my $now = time;
foreach my $dist(@dists) {
	$prev_tests->{$^X}->{$dist} = $now;
}

unlink $json_file if(-e $json_file);

if(open(my $fout, '>', $json_file)) {
	print $fout JSON::MaybeXS->new()->allow_nonref()->encode($prev_tests);
	close $fout;
}

if($mode) {
	nohang();
}

clean($clean_after_test);

if($ppf_is_installed) {
	$lock->release();
} else {
	close $lock if(defined($lock));
	unlink($lockfile) if(-e $lockfile);
}

# http://www.perlmonks.org/?node_id=324176
sub timed_system {
	my $timeout = shift;
	my @command;

	my $shell = $ENV{'SHELL'} || $CPAN::Config->{'shell'} || 'bash';

	my $command = join(' ', @_);

	if($opts{'v'}) {
		@command = ($shell, '-xc', $command);
	} else {
		@command = ($shell, '-c', $command);
	}

	if($mode eq 'govern') {
		my $load_low_limit = $number_of_cpus - 1;
		if($load_low_limit <= 0) {
			$load_low_limit = 1;
		}
		my %args = (
			name => 'testwrapper',
			command => \@command,
			timeout => $timeout,
			killfam => 1,
			load_watch => 1,
			load_high_limit => $number_of_cpus + 1,
			load_low_limit => $load_low_limit,
			on_multiple_instance => 'exit',
		);

		print Data::Dumper->new([\%args])->Dump() if($opts{'v'});

		if($opts{'v'} || $opts{'i'}) {
			$args{show_stdout} = 1;
			$args{show_stderr} = 1;
			$args{log_stderr}->{'dir'} = tmpdir();
			# $args{log_stderr}->{'size'} = '1M';
			$args{log_stderr}->{'size'} = 1024 * 1024;
			$args{log_stderr}->{'histories'} = '100';
		} else {
			$args{show_stdout} = 0;
			$args{show_stderr} = 0;
		}

		return Proc::Govern::govern_process(%args);
	}

	my $rundir = File::Temp->newdir(TEMPLATE => "$basename-XXXXX");
	$ENV{'TMPDIR'} = $rundir;
	print "Setting TMPDIR to $rundir\n" if($opts{'v'});

	if($mode eq 'killfam') {
		my $rc = -1;
		eval {
			$child = fork;

			die "Fork failed: $!" unless defined $child;

			unless ($child) {
				chdir $rundir;
				if($opts{'v'}) {
					print "$shell -xc $command\n";
					exec $shell, '-xc', $command;
				} else {
					print "$shell -c $command\n";
					exec $shell, '-c', $command;
				}
				die "$command: exec failed: $!";
			}

			local $SIG{ALRM} = $SIG{TERM} = $SIG{INT} = sub {
				syslog 'warning', "smoker: timeout killing child $child";
				if($opts{'v'}) {
					print "Killing process family $child\n";
				}
				my @pidlist = ($child);
				Proc::Killfam::killfam('CONT', @pidlist);
				sleep 2;
				Proc::Killfam::killfam('ALRM', @pidlist);
				sleep 2;
				Proc::Killfam::killfam('TERM', @pidlist);
				sleep 2;
				Proc::Killfam::killfam('KILL', @pidlist);
				sleep 2;
				kill 'CONT', -$child;
				sleep 2;
				kill 'CONT', $child;
				sleep 2;
				kill 'ALRM', $child;
				sleep 2;
				kill 'TERM', $child;
				sleep 2;
				kill 'KILL', $child;
				sleep 2;

				if(kill(0, $child)) {
					syslog 'warning', "smoker: $child won't die";
					die "Timeout! $child Won't die";
				}
				# die "Timeout!"

				nohang();
			}; # Just TERM.

			alarm $timeout;

			$rc = (waitpid($child, 0) == $child) ? $? : -1;

			alarm 0;

			if(kill(0, $child)) {
				my @pidlist = ($child);
				Proc::Killfam::killfam('CONT', @pidlist);
				sleep 2;
				Proc::Killfam::killfam('ALRM', @pidlist);
				sleep 2;
				Proc::Killfam::killfam('TERM', @pidlist);
				sleep 2;
				Proc::Killfam::killfam('KILL', @pidlist);
				sleep 2;
				kill 9, $child;
			}
			$child = 0;
			# TODO
			# Elsif $rc != -1 - insert code like System module
		};
		return -1 if $@ && $@ !~ /^Timeout!/;

		return $rc;
	}
	my $olddir = getcwd();
	chdir $rundir;
	my $rc = IPC::Cmd::run(command => \@command, timeout => $timeout, verbose => $opts{'v'});
	chdir $olddir;
	return $rc;
}

sub nohang {
	my $count = 0;

	while(waitpid(-1, WNOHANG) >= 0) {
		if($count++ >= 60) {
			syslog('warning', 'smoker: Stopped waiting for child after 60 seconds');
			last;
		}
		sleep(1);
	}
}

sub clean {
	my $clean_after_test = shift;

	if($clean_after_test && (my $build_dir = $CPAN::Config->{'build_dir'})) {
		print "Emptying $build_dir\n" if($opts{'v'});
		File::Path::rmtree($build_dir);
	}
}

# https://perldoc.perl.org/constant
sub declared ($) {
	use constant 1.01;	# don't omit this!

	my $name = shift;
	$name =~ s/^::/main::/;
	my $pkg = caller;
	my $full_name = $name =~ /::/ ? $name : "${pkg}::$name";
	$constant::declared{$full_name};
}

1;
