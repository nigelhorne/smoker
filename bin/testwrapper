#!/usr/bin/env bash

# Test a list of modules in the 'current' perl
# Use our own TMPDIR
# Ensure only one smoker is running at any given time

# set -x
set -e
source $PERLBREW_ROOT/etc/bashrc

if [ -r $HOME/.cpanreporter/$PERLBREW_PERL/config.ini ]; then
	export PERL_CPAN_REPORTER_DIR=$HOME/.cpanreporter/$PERLBREW_PERL
fi

# Docker images have memory limits set elsewhere
if [[ ! -r /proc/1/cgroup ]]; then
	kernel=`uname`
	if [[ "$kernel" != 'FreeBSD' && "$kernel" != 'OpenBSD' && "$kernel" != 'CYGWIN_NT-10.0' && `ulimit -d` = unlimited ]]; then
		ulimit -d 524288
	fi
	if [[ "$kernel" != 'SunOS' && "$kernel" != 'CYGWIN_NT-10.0' && `ulimit -m` = unlimited ]]; then
		ulimit -m 524288
		ulimit -u 256
	fi
	if [[ "$kernel" != 'CYGWIN_NT-10.0' && "$kernel" != 'DragonFly' ]]; then
		ulimit -f 300000
	fi
fi

typeset -r NEWTMPDIR=${TMPDIR:-/tmp}/testwrapper.$$
typeset -r ID=`id -u`

if [[ -d /run/user/$ID ]]; then
	typeset -r LOCKFILE=/run/user/$ID/testwrapper.pid
else
	typeset -r LOCKFILE=${TMPDIR:-/tmp}/testwrapper.pid
fi

if [ -e ${LOCKFILE} ] && kill -0 `cat ${LOCKFILE}`; then
	logger -t cpan "$0: already running"
	exit
fi

echo $$ > ${LOCKFILE}

mkdir $NEWTMPDIR
chmod 700 $NEWTMPDIR
cd $NEWTMPDIR

# make sure the lockfile is removed when we exit and then claim it
if $(command -v flock > /dev/null); then
	typeset -r FLOCK="flock -n ${LOCKFILE}"
else
	# Solaris doesn't have the flock command
	typeset -r FLOCK=
fi

trap "$FLOCK rm -fr ${NEWTMPDIR}; exit" INT TERM EXIT ALRM

# FIXME:  should all be done within one flock call

if [[ -x /usr/bin/timeout ]]; then
	# Since this is the last level of the call chain
	#	smokerdaemon or /usr/bin/timeout->smoker->testwrapper
	#	this should timeout first
	TMPDIR=$NEWTMPDIR $FLOCK timeout -k 5m 45m perl -MCPAN -e "CPAN::Shell->test($*)"
elif [[ -x /usr/local/bin/gtimeout ]]; then
	# OpenBSD - coreutils package
	TMPDIR=$NEWTMPDIR $FLOCK /usr/local/bin/gtimeout -k 5m 45m perl -MCPAN -e "CPAN::Shell->test($*)"
else
	TMPDIR=$NEWTMPDIR $FLOCK perl -MCPAN -e "CPAN::Shell->test($*)"
fi

TMPDIR=$NEWTMPDIR $FLOCK perl -MCPAN -e "CPAN::Shell->clean($*)"

exec $FLOCK rm -rf ${NEWTMPDIR}
