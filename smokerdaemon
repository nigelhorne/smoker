#!/usr/bin/env perl

# Author Nigel Horne: njh@bandsman.co.uk
# Copyright (C) 2016, Nigel Horne

# Usage is subject to licence terms.
# The licence terms of this software are as follows:
# Personal single user: GPL2
# All other users (including Commercial, Charity, Educational, Government)
#	must apply in writing for a licence for use from Nigel Horne at the
#	above e-mail.

# The local minicpan repository has been updated, test all of the updated
#	modules;
#
#	-v: verbose

# use autodie qw(:all);
use warnings;
use strict;

use IO::Socket::INET;
use File::HomeDir;
use File::Spec;
use Sys::Syslog;
use File::Temp;
use lib File::Spec->catfile(File::HomeDir->my_home(), '/.cpan/CPAN');
use MyConfig;
use Unix::Processors;
use Sys::CpuLoad;
use Proc::Killfam;
use Fcntl qw(:flock);
use Getopt::Std;
use POSIX ":sys_wait_h";
use BSD::Resource;

die 'Install and configure CPAN::Reporter' unless($CPAN::Config->{'test_report'});

my $lockfile = File::Spec->catfile($CPAN::Config->{'cpan_home'}, '.lock');
if(-r $lockfile && (open(my $lock, '<', $lockfile))) {
	my $pid = <$lock>;
	close $lock;
	chomp $pid;
	if(kill(0, $pid)) {
		print "CPAN shell running\n";
		exit 0;
	}
	unlink $lockfile;
}
$lockfile = File::Spec->catfile(File::Spec->tmpdir(), 'cpan-test.lck');

my %opts;
getopts('v', \%opts);

local $SIG{TERM} = $SIG{INT} = $SIG{HUP} = sub {
	unlink $lockfile;
	exit 1;
};

# FIXME - should be argument
my $port = 21212;

$ENV{'CPAN_SQLITE_NO_LOG_FILES'} = 1;
$ENV{'AUTOMATED_TESTING'} = 1;

# TODO: read from config files
$ENV{'PERLBREW_ROOT'} = $ENV{'HOME'} . '/perl5/perlbrew';
$ENV{'PERLBREW_HOME'} = $ENV{'HOME'} . '/.perlbrew';

openlog 'CPAN', 'cons,pid', 'user';

setrlimit(RLIMIT_DATA, 32 * 1024 * 1024, 64 * 1024 * 1024) or
	warn ('Can\'t limit the data size - watch for memory usage');

setrlimit(RLIMIT_RSS, 32 * 1024 * 1024, 64 * 1024 * 1024) or
	warn ('Can\'t limit the data size - watch for memory usage');

setrlimit(RLIMIT_CPU, 300, 1200) or
	warn ('Can\'t limit the CPU time - watch for long running programs');

# Eval added to handle RT113898
# eval {
	# my $number_of_cpus = Sys::Info->new()->device('CPU')->count();
# 
	# if(defined($number_of_cpus) && ($number_of_cpus > 1)) {
		# $ENV{'HARNESS_OPTIONS'} = "j$number_of_cpus";
		# $ENV{'TEST_JOBS'} = $number_of_cpus;
	# }
# }
# };

my $number_of_cpus = Unix::Processors->new()->max_physical();
if(defined($number_of_cpus) && ($number_of_cpus > 1)) {
	$ENV{'HARNESS_OPTIONS'} = "j$number_of_cpus";
	$ENV{'TEST_JOBS'} = $number_of_cpus;
}

while(1) {
	# Not needed, but somehow it seems cleaner to close and reopen
	my $s = IO::Socket::INET->new(LocalPort => $port, Proto => 'udp')
		or die "Can't listen on port $port";

	my @dists;

	DIST: while(1) {
		my $dist;

		$s->recv($dist, 256);

		chomp $dist;

		last DIST if($dist eq '');

		push @dists, $dist;
	}

	my $lock;

	while(1) {
		if((-r $lockfile) && open($lock, '<', $lockfile)) {
			my $pid = <$lock>;
			close $lock;
			chomp $pid;
			if(kill(0, $pid)) {
				print "Already running\n" if($opts{'v'});
				sleep(10);
				next;
			}
		}
		open(my $lock, '>', $lockfile) or die "$lockfile: $!";
		flock($lock, LOCK_EX|LOCK_NB) or die "$lockfile: $!";
		print $lock $$;
		flush $lock;
		last;
	}

	foreach my $dist(@dists) {
		while(1) {
			my @lav = Sys::CpuLoad::load();
			last if($lav[0] <= 3);
			sleep 10;
		}

		my $tmp = File::Temp->new(UNLINK => 0);
		if($opts{'v'}) {
			print $tmp "source \$PERLBREW_ROOT/etc/bashrc\nexec perlbrew exec perl -MCPAN -e 'CPAN::Shell->test(\"$dist.tar.gz\")' < /dev/null\n";
		} else {
			print $tmp "source \$PERLBREW_ROOT/etc/bashrc\nexec perlbrew exec perl -MCPAN -e 'CPAN::Shell->test(\"$dist.tar.gz\")' > /dev/null 2>&1 < /dev/null\n";
		}
		my $filename = $tmp->filename();
		close $tmp;

		my $rc = timed_system(1800, $CPAN::Config->{'shell'}, $filename);
		# my $rc = timed_system(1800, $CPAN::Config->{'shell'} . " $filename");

		unlink $filename;

		syslog 'info', "$dist returned $rc";
		# print "$dist returned $rc";

		1 while(waitpid(-1, WNOHANG) > 0);
	}
	if(defined($lock)) {
		close $lock;
	}
	unlink $lockfile;
}
unlink $lockfile;
closelog;

# http://www.perlmonks.org/?node_id=324176
sub timed_system {
	my $time = shift;

	my $pid;

	local $SIG{ALRM} = sub {
		if($opts{'v'}) {
			print "Killing process family $pid\n";
		}
		syslog 'info', "killing process family $pid";
		killfam 14, $pid or die "killfam: $!";
		sleep 2;
		kill 14, $pid;
		sleep 2;
		killfam 9, $pid;
		kill 9, $pid;
		if(kill(0, $pid)) {
			syslog 'warn', "$pid won't die";
			die "$pid Won't die";
		}
		# die "Timeout!"

		1 while(waitpid(-1, WNOHANG) > 0);
	}; # Just SIGTERM.

	my $rc = -1;
	eval {
		$pid = fork;

		die "Fork failed: $!" unless defined $pid;

		unless ($pid) {
			exec @_;
			die "Exec failed: $!";
		}

		alarm $time;

		$rc = (waitpid($pid, 0) == $pid) ? $? : -1;

		alarm 0;
	};
	return -1 if $@ && $@ !~ /^Timeout!/;

	return $rc;
}
